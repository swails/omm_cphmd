#!/usr/bin/env python

from optparse import OptionParser
import sys
import os

epilog = '<compiler> must be either "gnu", "intel", or "clang"'

parser = OptionParser(usage='%prog [Options] <compiler>', epilog=epilog)
parser.add_option('-d', '--debug', dest='debug', default=False,
                  action='store_true', help='Trigger the debug flags.')
parser.add_option('-n', '--no-opt', dest='opt', default=True,
                  action='store_false', help='Disable compiler optimizations.')
parser.add_option('--no-zlib', action='store_false', default=True, dest='zlib',
                  help='Compile without zlib support')
parser.add_option('--prefix', dest='prefix', default=os.getcwd(),
                  help='Installation destination. Default is current directory')
parser.add_option('--with-netcdf', dest='netcdf', default=None,
                  help='Prefix where NetCDF libraries and headers are located')
parser.add_option('--without-netcdf', dest='disable_netcdf', default=False,
                  action='store_true', help="Don't install with NetCDF support")


opt, arg = parser.parse_args()

if len(arg) < 1 and not 'CC' in os.environ and not 'CXX' in os.environ:
   sys.stderr.write("No compiler found! Must specify gnu or intel.\n")
   parser.print_help()
   sys.exit(1)
elif 'CXX' in os.environ:
   if 'g++' in os.environ['CXX']:
      arg.append('gcc')
   elif 'clang++' in os.environ['CXX']:
      arg.append('clang')
   elif 'icpc' in os.environ['CXX']:
      arg.append('intel')
   else:
      sys.stderr.write('Unrecognized C++ compiler %s' % os.environ['CXX'])
elif 'CC' in os.environ:
   if 'gcc' in os.environ['CC']:
      arg.append('gcc')
   elif 'clang' in os.environ['CC']:
      arg.append('clang')
   elif 'icc' in os.environ['CC']:
      arg.append('intel')
   else:
      sys.stderr.write('Unrecognized C compiler %s' % os.environ['CXX'])
elif len(arg) < 1:
   sys.stderr.write('No compiler provided or detected from the environment\n')

if len(arg) > 1:
   sys.stderr.write("Too many command-line arguments found.\n")
   parser.print_help()
   sys.exit(1)

if not arg[0].lower() in ('gnu', 'intel', 'gcc', 'clang'):
   sys.exit("Unrecognized compiler [%s]. Choose 'gnu' 'intel' or 'clang'.\n" %
            arg[0])

f = open('config.h', 'w')

if os.getenv('OPENMM_LIB_PATH') is None or \
        os.getenv('OPENMM_INCLUDE_PATH') is None:
    sys.exit("OpenMM not detected -- be sure OPENMM_LIB_PATH and "
             "OPENMM_INCLUDE_PATH are set")

if arg[0].lower() in ('gnu', 'gcc'):
   # GNU compilers
   cpp = 'g++'
   f90 = 'gfortran'
   ld = 'g++'
   ldflags = ['-fPIC']
   cppflags = ['-Wall', '-fPIC', '-I%s' % os.getenv('OPENMM_INCLUDE_PATH')]
   f90flags = ['-Wall', '-fPIC']

   if opt.opt:
      cppflags.extend(['-O3', '-mtune=native'])
      f90flags.extend(['-O3', '-mtune=native'])
      ldflags.extend(['-O3', '-mtune=native'])
   else:
      cppflags.append('-O0')
      f90flags.append('-O0')
      ldflags.append('-O0')

   if opt.debug:
      cppflags.append('-g')
      f90flags.append('-g')
      ldflags.append('-g')

elif arg[0].lower() == 'clang':
   # clang compilers
   cpp = 'clang++'
   f90 = 'gfortran'
   ld = 'clang++'
   ldflags = ['-fPIC']

   cppflags = ['-Wall', '-fPIC', '-I%s' % os.getenv('OPENMM_INCLUDE_PATH')]
   f90flags = ['-Wall', '-fPIC']

   if opt.opt:
      cppflags.extend(['-O3'])
      f90flags.extend(['-O3'])
      ldflags.extend(['-O3'])
   else:
      cppflags.append('-O0')
      f90flags.append('-O0')
      ldflags.append('-O0')

   if opt.debug:
      cppflags.append('-g')
      f90flags.append('-g')
      ldflags.append('-g')

else:
   # Intel compilers
   cpp = 'icpc'
   f90 = 'ifort'
   ld = 'ifort'
   ldflags = ['-fpic']
   cppflags = ['-Wall', '-fpic', '-I%s' % os.getenv('OPENMM_INCLUDE_PATH')]
   f90flags = ['-warn', 'all', '-fpic']

   if opt.opt:
      cppflags.extend(['-O3', '-xHost', '-ipo'])
      f90flags.extend(['-O3', '-xHost', '-ipo'])
      ldflags.extend(['-O3', '-xHost', '-ipo'])
   else:
      cppflags.append('-O0')
      f90flags.append('-O0')
      ldflags.append('-O0')

   if opt.debug:
      cppflags.extend(['-g', '-debug'])
      f90flags.extend(['-g', '-debug'])
      ldflags.extend(['-g', '-debug'])

if opt.zlib:
   cppflags.append('-DHASGZ')

if 'darwin' in sys.platform.lower():
    makeshared = '-dynamiclib -undefined suppress -flat_namespace'
    sharedext = '.dylib'
else:
    makeshared = '-shared'
    sharedext = '.so'

ldflags.extend(['-L%s' % os.getenv('OPENMM_LIB_PATH'), '-lOpenMM'])

if not opt.disable_netcdf:
    cppflags.append("-DHAS_NETCDF")
    f90flags.append("-DHAS_NETCDF")
    if opt.netcdf is not None:
        ldflags.append('-L%s' % os.path.join(opt.netcdf, 'lib')) # lib64??
        cppflags.append('-I%s' % os.path.join(opt.netcdf, 'include'))
    ldflags.append('-lnetcdf')

confighopts = dict(cpp=cpp, f90=f90, ld=ld, ldflags=' '.join(ldflags),
               cppflags=' '.join(cppflags), f90flags=' '.join(f90flags),
               confline=' '.join(sys.argv), prefix=opt.prefix,
               makeshared=makeshared, sharedext=sharedext)
f.write("""# configured with [[ %(confline)s ]]
# Where to install
PREFIX = %(prefix)s

# Compilers
CXX = %(cpp)s
F90 = %(f90)s
LD = %(ld)s

# Flags
CXXFLAGS = %(cppflags)s
LDFLAGS = %(ldflags)s

# To make a shared library
MAKESHARED = %(makeshared)s
SHARED_EXT = %(sharedext)s
""" % confighopts)
f.close()
